class Node():

    # Constructor method
    def __init__(self, item_data):
        self.data = item_data
        self.next = None

    def get_data(self):
        return self.data

    def get_priority(self):
        return self.priority

    def get_next(self):
        return self.next

    def set_next(self, new_next):
        self.next = new_next   

counter = 0

class PriorityStack():

    # Constructor method
    def __init__(self):
        self.top = None
        self.rear = None

    def get_top(self):
        return self.top

    def set_top(self, new_top):
        self.top = new_top

    def isempty(self):
        if self.top == None:
            return True
        else:
            return False
    
    # To add onto a stack 

    def enstack(self,data):
        global counter


        newnode = Node(data)
        counter = counter + 1

        if self.isempty():

            # if list is empty then newnode will be front 
            self.set_top(newnode)
        
        else:
            #replacing previous top
            newnode.set_next(self.get_top())
            self.set_top(newnode)
            
    # Removing the top part of the list

    def destack(self):
        global counter

        removed = None

        #checks if list is empty before removal

        if self.isempty():
            print("cant deque an empty list")
        
        # if list aint empty then remove top and replace it.
            
        else:
            self.set_top(self.top.get_next())
            counter = counter - 1
        
        return removed
    


    # the peek function reveals what is at the top of the list

    def peek(self):

        #what if the list is empty?
        if self.isempty():
            print("list is empty cant peak")

        #if the list isnt empty!
        else:
            toppiest = self.top.get_data()
            print(toppiest)





list2 = PriorityStack()

list2.enstack("josh")
list2.enstack("tom")
list2.peek()
list2.enstack("amey")
list2.peek()
list2.destack()
list2.enstack("alex")
list2.peek()
